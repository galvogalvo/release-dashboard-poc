import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import { gql } from "@apollo/client";
import client from "../apollo-client";

function sinceLastRelease(releaseDate){

  //Get 1 day in milliseconds
  const one_day=1000*60*60*24;

  const currentTime = new Date();
  const elapsedMS = currentTime - Date.parse(releaseDate);
  let elapsedDays = Math.round(elapsedMS/one_day);
  return elapsedDays;
}

export default function Home({ repositories }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          TTG Release Dashboard
        </h1>

        <div className={styles.grid}>
        {repositories.map((repository) => (
          repository.latestRelease && 
          <>
            <div className={ sinceLastRelease(repository.latestRelease.createdAt) < 8 ? styles.green + " " + styles.card : styles.red + " " + styles.card}>
              <h3>{repository.name}</h3>
              <p>{ sinceLastRelease(repository.latestRelease.createdAt) + ' days since last release' }
              </p>
              <p>
                {repository.latestRelease.name}
              </p>
            </div>
          </>
        ))}
      </div>
      </main>

    </div>
  )
}

export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
    query{
      organization(login: "TodayTix"){
        repositories(first:100, orderBy: { field: NAME, direction: ASC}){
          nodes{
            id
            name
            latestRelease{
              id
              name
              tagName
              createdAt
              author {
                id
                name
                email
              }
            }
            releases(last:10, orderBy: { field: CREATED_AT, direction: DESC}){
              edges{
                node{
                  id
                  name
                  tagName
                  createdAt
                  author {
                    id
                    name
                    email
                  }
                }
              }
            }
          }
        }
      }
    }
    `,
  });
  console.log(data.organization.repositories.nodes);
  return {
    props: {
      repositories: data.organization.repositories.nodes
    },
 };
}
